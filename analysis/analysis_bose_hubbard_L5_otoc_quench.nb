(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    266282,       5474]
NotebookOptionsPosition[    262389,       5340]
NotebookOutlinePosition[    262732,       5355]
CellTagsIndexPosition[    262689,       5352]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Bose-Hubbard model simulation", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{"<<", "\"\<../mathematica/mps_base.m\>\""}]], "Input"],

Cell[CellGroupData[{

Cell["Bose-Hubbard Hamiltonian", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SparseIdentityMatrix", "[", "d_", "]"}], ":=", 
  RowBox[{"SparseArray", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i_", ",", "i_"}], "}"}], "\[Rule]", "1"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", "d"}], "}"}]}], "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SiteCreateOp", "[", "M_", "]"}], ":=", 
  RowBox[{"DiagonalMatrix", "[", 
   RowBox[{
    RowBox[{"Sqrt", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", "M"}], "]"}], "]"}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SiteAnnihilOp", "[", "M_", "]"}], ":=", 
  RowBox[{"DiagonalMatrix", "[", 
   RowBox[{
    RowBox[{"Sqrt", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", "M"}], "]"}], "]"}], ",", "1"}], "]"}]}]}], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NumberOp", "[", "M_", "]"}], ":=", 
  RowBox[{"DiagonalMatrix", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "M"}], "]"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"construct", " ", "Bose"}], "-", 
    RowBox[{
    "Hamiltonian", " ", "with", " ", "open", " ", "boundary", " ", 
     "conditions"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"HBose", "[", 
     RowBox[{"t_", ",", "U_", ",", "\[Mu]_", ",", "M_", ",", "1"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      FractionBox["U", "2"], 
      RowBox[{
       RowBox[{"NumberOp", "[", "M", "]"}], ".", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"NumberOp", "[", "M", "]"}], "-", 
         RowBox[{"IdentityMatrix", "[", 
          RowBox[{"M", "+", "1"}], "]"}]}], ")"}]}]}], "-", 
     RowBox[{"\[Mu]", " ", 
      RowBox[{"NumberOp", "[", "M", "]"}]}]}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"HBose", "[", 
     RowBox[{"t_", ",", "U_", ",", "\[Mu]_", ",", "M_", ",", "L_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "t"}], " ", 
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"KroneckerProduct", "[", 
          RowBox[{
           RowBox[{"SparseIdentityMatrix", "[", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"M", "+", "1"}], ")"}], 
             RowBox[{"j", "-", "1"}]], "]"}], ",", 
           RowBox[{"SiteCreateOp", "[", "M", "]"}], ",", 
           RowBox[{"SiteAnnihilOp", "[", "M", "]"}], ",", 
           RowBox[{"SparseIdentityMatrix", "[", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"M", "+", "1"}], ")"}], 
             RowBox[{"L", "-", "j", "-", "1"}]], "]"}]}], "]"}], "+", 
         RowBox[{"KroneckerProduct", "[", 
          RowBox[{
           RowBox[{"SparseIdentityMatrix", "[", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"M", "+", "1"}], ")"}], 
             RowBox[{"j", "-", "1"}]], "]"}], ",", 
           RowBox[{"SiteAnnihilOp", "[", "M", "]"}], ",", 
           RowBox[{"SiteCreateOp", "[", "M", "]"}], ",", 
           RowBox[{"SparseIdentityMatrix", "[", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"M", "+", "1"}], ")"}], 
             RowBox[{"L", "-", "j", "-", "1"}]], "]"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"L", "-", "1"}]}], "}"}]}], "]"}]}], "+", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"KroneckerProduct", "[", 
        RowBox[{
         RowBox[{"SparseIdentityMatrix", "[", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"M", "+", "1"}], ")"}], 
           RowBox[{"j", "-", "1"}]], "]"}], ",", 
         RowBox[{
          RowBox[{
           FractionBox["U", "2"], 
           RowBox[{
            RowBox[{"NumberOp", "[", "M", "]"}], ".", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"NumberOp", "[", "M", "]"}], "-", 
              RowBox[{"IdentityMatrix", "[", 
               RowBox[{"M", "+", "1"}], "]"}]}], ")"}]}]}], "-", 
          RowBox[{"\[Mu]", " ", 
           RowBox[{"NumberOp", "[", "M", "]"}]}]}], ",", 
         RowBox[{"SparseIdentityMatrix", "[", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"M", "+", "1"}], ")"}], 
           RowBox[{"L", "-", "j"}]], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "L"}], "}"}]}], "]"}]}]}]}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simulation parameters", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"kinetic", " ", "hopping", " ", "parameter"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["tH", "val"], "=", "1"}], ";"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"interaction", " ", "strength"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["U", "val"], "=", "5"}], ";"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"chemical", " ", "potential"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[Mu]", "val"], "=", 
    FractionBox["1", "7"]}], ";"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"number", " ", "of", " ", "lattice", " ", "sites"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["L", "val"], "=", "5"}], ";"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "single", " ", "site", " ", "occupation", " ", "number", " ", "cut"}], 
    "-", "off"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["M", "val"], "=", "2"}], ";"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["t", "list"], "=", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "5", ",", 
     RowBox[{"1", "/", "8"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "%", "]"}]}], "Input"],

Cell[BoxData["41"], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Out-of-time-order correlations", "Subsection"],

Cell[CellGroupData[{

Cell["Read simulation results from disk", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["fn", "import"], "=", 
   RowBox[{"\"\<../output/bose_hubbard/L\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["L", "val"], "]"}], "<>", 
    "\"\<_otoc_quench/bose_hubbard_L\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["L", "val"], "]"}], "<>", "\"\<_M\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["M", "val"], "]"}]}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["otoc1", "list"], "=", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{
      SubscriptBox["fn", "import"], "<>", "\"\<_otoc1.dat\>\""}], ",", 
     "\"\<Complex128\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "%", "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", "41", "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "example", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   SubscriptBox["otoc1", "list"], "\[LeftDoubleBracket]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", 
     RowBox[{"-", "1"}]}], "}"}], "\[RightDoubleBracket]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.9992583322753016`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.00008712179051711072`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{
    RowBox[{"-", "0.22709692465984008`"}], "-", 
    RowBox[{"0.16505974245049132`", " ", "\[ImaginaryI]"}]}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["otoc2", "list"], "=", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{
      SubscriptBox["fn", "import"], "<>", "\"\<_otoc2.dat\>\""}], ",", 
     "\"\<Complex128\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "%", "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", "41", "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["gf", "list"], "=", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{
      SubscriptBox["fn", "import"], "<>", "\"\<_gf.dat\>\""}], ",", 
     "\"\<Complex128\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "%", "]"}]}], "Input"],

Cell[BoxData[
 RowBox[{"{", "41", "}"}]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reference calculation", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GF", "[", 
   RowBox[{"A_", ",", "B_", ",", "H_", ",", "\[Phi]_", ",", "t_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"At", "=", 
      RowBox[{
       RowBox[{"MatrixExp", "[", 
        RowBox[{
         RowBox[{"-", "\[ImaginaryI]"}], " ", "t", " ", "H"}], "]"}], ".", 
       "A", ".", 
       RowBox[{"MatrixExp", "[", 
        RowBox[{"\[ImaginaryI]", " ", "t", " ", "H"}], "]"}]}]}], "}"}], ",", 
    FractionBox[
     RowBox[{"Tr", "[", 
      RowBox[{"\[Phi]", ".", "At", ".", "B"}], "]"}], 
     RowBox[{"Tr", "[", "\[Phi]", "]"}]]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"OTOC", "[", 
   RowBox[{
   "A_", ",", "B_", ",", "C_", ",", "D_", ",", "H_", ",", "\[Phi]_", ",", 
    "t_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"At", "=", 
       RowBox[{
        RowBox[{"MatrixExp", "[", 
         RowBox[{
          RowBox[{"-", "\[ImaginaryI]"}], " ", "t", " ", "H"}], "]"}], ".", 
        "A", ".", 
        RowBox[{"MatrixExp", "[", 
         RowBox[{"\[ImaginaryI]", " ", "t", " ", "H"}], "]"}]}]}], ",", 
      RowBox[{"Ct", "=", 
       RowBox[{
        RowBox[{"MatrixExp", "[", 
         RowBox[{
          RowBox[{"-", "\[ImaginaryI]"}], " ", "t", " ", "H"}], "]"}], ".", 
        "C", ".", 
        RowBox[{"MatrixExp", "[", 
         RowBox[{"\[ImaginaryI]", " ", "t", " ", "H"}], "]"}]}]}]}], "}"}], 
    ",", 
    FractionBox[
     RowBox[{"Tr", "[", 
      RowBox[{"\[Phi]", ".", "At", ".", "B", ".", "Ct", ".", "D"}], "]"}], 
     RowBox[{"Tr", "[", "\[Phi]", "]"}]]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SiteCreateOpFull", "[", 
   RowBox[{"j_", ",", "M_", ",", "L_"}], "]"}], ":=", 
  RowBox[{"KroneckerProduct", "[", 
   RowBox[{
    RowBox[{"SparseIdentityMatrix", "[", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"M", "+", "1"}], ")"}], "j"], "]"}], ",", 
    RowBox[{"SiteCreateOp", "[", "M", "]"}], ",", 
    RowBox[{"SparseIdentityMatrix", "[", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"M", "+", "1"}], ")"}], 
      RowBox[{"L", "-", "j", "-", "1"}]], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SiteAnnihilOpFull", "[", 
   RowBox[{"j_", ",", "M_", ",", "L_"}], "]"}], ":=", 
  RowBox[{"KroneckerProduct", "[", 
   RowBox[{
    RowBox[{"SparseIdentityMatrix", "[", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"M", "+", "1"}], ")"}], "j"], "]"}], ",", 
    RowBox[{"SiteAnnihilOp", "[", "M", "]"}], ",", 
    RowBox[{"SparseIdentityMatrix", "[", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"M", "+", "1"}], ")"}], 
      RowBox[{"L", "-", "j", "-", "1"}]], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SiteNumberOpFull", "[", 
   RowBox[{"j_", ",", "M_", ",", "L_"}], "]"}], ":=", 
  RowBox[{"KroneckerProduct", "[", 
   RowBox[{
    RowBox[{"SparseIdentityMatrix", "[", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"M", "+", "1"}], ")"}], "j"], "]"}], ",", 
    RowBox[{"NumberOp", "[", "M", "]"}], ",", 
    RowBox[{"SparseIdentityMatrix", "[", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"M", "+", "1"}], ")"}], 
      RowBox[{"L", "-", "j", "-", "1"}]], "]"}]}], "]"}]}]], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["i", "site"], "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["j", "site"], "=", "3"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "MPO", " ", "representing", " ", "a", " ", "factorized", " ", 
    "projector"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[Phi]", "state"], "=", 
    RowBox[{"MPOMergeFull", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"ArrayReshape", "[", 
        RowBox[{
         RowBox[{"SparseArray", "[", 
          RowBox[{"DiagonalMatrix", "[", 
           RowBox[{"UnitVector", "[", 
            RowBox[{
             RowBox[{
              SubscriptBox["M", "val"], "+", "1"}], ",", "2"}], "]"}], "]"}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            SubscriptBox["M", "val"], "+", "1"}], ",", 
           RowBox[{
            SubscriptBox["M", "val"], "+", "1"}], ",", "1", ",", "1"}], 
          "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         SubscriptBox["L", "val"]}], "}"}]}], "]"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"single", " ", "non"}], "-", 
     RowBox[{"zero", " ", "entry"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"%", "//", "ArrayRules"}]}]}]], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJztziEKAlEARdEPLsM0rkAwCJafxKzJNIJgFKPFHdgNYpoiGExTBldgMRns
lkEQk2ASEVyCQeSEB5eTXjKc9EaVEEL1s3e3prt0WTvEVSPLm49jLLPk3N1c
Iuecc84555xzzjnnnHPOOeecc845/w8v5vV2kZfx1FlvZ4tr3PfHz8H99nM/
Oeecc84555xzzjnnnHPOOeecc875d/0FxfobLw==
                "], {{0, 0}, {27, 27}}, {0, 1}], AspectRatio -> 1, Axes -> 
               False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
               Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"243", ",", "243"}], "}"}], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJztziEKAlEARdEPLsM0rkAwCJafxKzJNIJgFKPFHdgNYpoiGExTBldgMRns
lkEQk2ASEVyCQeSEB5eTXjKc9EaVEEL1s3e3prt0WTvEVSPLm49jLLPk3N1c
Iuecc84555xzzjnnnHPOOeecc845/w8v5vV2kZfx1FlvZ4tr3PfHz8H99nM/
Oeecc84555xzzjnnnHPOOeecc875d/0FxfobLw==
                "], {{0, 0}, {27, 27}}, {0, 1}], AspectRatio -> 1, Axes -> 
               False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
               Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"243", ",", "243"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0.000016935087808430286`", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"\"", "SummaryItem"]}]}, {
                 TagBox[
                  TagBox[
                   GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"122", ",", "122"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("SparseArray[<1>, {243, 243}]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "122"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}], "\[Rule]", "0"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Comm", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"A", ".", "B"}], "-", 
   RowBox[{"B", ".", "A"}]}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "\[Phi]", " ", "does", " ", "not", " ", "commute", " ", "with", " ", 
    "Hamiltonian"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Comm", "[", 
    RowBox[{
     RowBox[{"HBose", "[", 
      RowBox[{"tH", ",", "U", ",", "\[Mu]", ",", 
       SubscriptBox["M", "val"], ",", 
       SubscriptBox["L", "val"]}], "]"}], ",", 
     SubscriptBox["\[Phi]", "state"]}], "]"}], "//", 
   "ArrayRules"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"68", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"104", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"116", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"120", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "122"}], "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "68"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "176"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "104"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "140"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "116"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "128"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "120"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"122", ",", "124"}], "}"}], "\[Rule]", 
    RowBox[{
     SqrtBox["2"], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"124", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"128", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"140", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"176", ",", "122"}], "}"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["2"]}], " ", "tH"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}], "\[Rule]", "0"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"local", " ", "density"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tH", "=", 
       SubscriptBox["tH", "val"]}], ",", 
      RowBox[{"U", "=", 
       SubscriptBox["U", "val"]}], ",", 
      RowBox[{"\[Mu]", "=", 
       SubscriptBox["\[Mu]", "val"]}], ",", 
      RowBox[{"M", "=", 
       SubscriptBox["M", "val"]}], ",", 
      RowBox[{"L", "=", 
       SubscriptBox["L", "val"]}], ",", 
      RowBox[{"\[Phi]", "=", 
       SubscriptBox["\[Phi]", "state"]}], ",", "HB"}], "}"}], ",", 
    RowBox[{
     RowBox[{"HB", "=", 
      RowBox[{"N", "[", 
       RowBox[{"HBose", "[", 
        RowBox[{"tH", ",", "U", ",", "\[Mu]", ",", "M", ",", "L"}], "]"}], 
       "]"}]}], ";", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Tr", "[", 
        RowBox[{"\[Phi]", ".", 
         RowBox[{"SiteNumberOpFull", "[", 
          RowBox[{"i", ",", "M", ",", "L"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "0", ",", 
         RowBox[{"L", "-", "1"}]}], "}"}]}], "]"}]}]}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"total", " ", "energy"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tH", "=", 
        SubscriptBox["tH", "val"]}], ",", 
       RowBox[{"U", "=", 
        SubscriptBox["U", "val"]}], ",", 
       RowBox[{"\[Mu]", "=", 
        SubscriptBox["\[Mu]", "val"]}], ",", 
       RowBox[{"M", "=", 
        SubscriptBox["M", "val"]}], ",", 
       RowBox[{"L", "=", 
        SubscriptBox["L", "val"]}], ",", 
       RowBox[{"\[Phi]", "=", 
        SubscriptBox["\[Phi]", "state"]}], ",", "HB"}], "}"}], ",", 
     RowBox[{
      RowBox[{"HB", "=", 
       RowBox[{"N", "[", 
        RowBox[{"HBose", "[", 
         RowBox[{"tH", ",", "U", ",", "\[Mu]", ",", "M", ",", "L"}], "]"}], 
        "]"}]}], ";", 
      RowBox[{"Tr", "[", 
       RowBox[{"\[Phi]", ".", "HB"}], "]"}]}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"only", " ", "depends", " ", "on", " ", "\[Mu]"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"%", "+", 
    RowBox[{
     SubscriptBox["L", "val"], 
     SubscriptBox["\[Mu]", "val"]}]}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"-", "0.7142857142857143`"}]], "Output"],

Cell[BoxData["0.`"], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tH", "=", 
       SubscriptBox["tH", "val"]}], ",", 
      RowBox[{"U", "=", 
       SubscriptBox["U", "val"]}], ",", 
      RowBox[{"\[Mu]", "=", 
       SubscriptBox["\[Mu]", "val"]}], ",", 
      RowBox[{"M", "=", 
       SubscriptBox["M", "val"]}], ",", 
      RowBox[{"L", "=", 
       SubscriptBox["L", "val"]}], ",", 
      RowBox[{"\[Phi]", "=", 
       SubscriptBox["\[Phi]", "state"]}], ",", "HB"}], "}"}], ",", 
    RowBox[{
     RowBox[{"HB", "=", 
      RowBox[{"N", "[", 
       RowBox[{"HBose", "[", 
        RowBox[{"tH", ",", "U", ",", "\[Mu]", ",", "M", ",", "L"}], "]"}], 
       "]"}]}], ";", 
     RowBox[{
      SubscriptBox["otoc1", 
       RowBox[{"list", ",", "ref"}]], "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"OTOC", "[", 
         RowBox[{
          RowBox[{"SiteCreateOpFull", "[", 
           RowBox[{
            SubscriptBox["j", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteCreateOpFull", "[", 
           RowBox[{
            SubscriptBox["i", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteAnnihilOpFull", "[", 
           RowBox[{
            SubscriptBox["j", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteAnnihilOpFull", "[", 
           RowBox[{
            SubscriptBox["i", "site"], ",", "M", ",", "L"}], "]"}], ",", "HB",
           ",", "\[Phi]", ",", "t"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          SubscriptBox["t", "list"]}], "}"}]}], "]"}]}]}]}], "]"}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tH", "=", 
       SubscriptBox["tH", "val"]}], ",", 
      RowBox[{"U", "=", 
       SubscriptBox["U", "val"]}], ",", 
      RowBox[{"\[Mu]", "=", 
       SubscriptBox["\[Mu]", "val"]}], ",", 
      RowBox[{"M", "=", 
       SubscriptBox["M", "val"]}], ",", 
      RowBox[{"L", "=", 
       SubscriptBox["L", "val"]}], ",", 
      RowBox[{"\[Phi]", "=", 
       SubscriptBox["\[Phi]", "state"]}], ",", "HB"}], "}"}], ",", 
    RowBox[{
     RowBox[{"HB", "=", 
      RowBox[{"N", "[", 
       RowBox[{"HBose", "[", 
        RowBox[{"tH", ",", "U", ",", "\[Mu]", ",", "M", ",", "L"}], "]"}], 
       "]"}]}], ";", 
     RowBox[{
      SubscriptBox["otoc2", 
       RowBox[{"list", ",", "ref"}]], "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"OTOC", "[", 
         RowBox[{
          RowBox[{"SiteCreateOpFull", "[", 
           RowBox[{
            SubscriptBox["j", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteAnnihilOpFull", "[", 
           RowBox[{
            SubscriptBox["i", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteAnnihilOpFull", "[", 
           RowBox[{
            SubscriptBox["j", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteCreateOpFull", "[", 
           RowBox[{
            SubscriptBox["i", "site"], ",", "M", ",", "L"}], "]"}], ",", "HB",
           ",", "\[Phi]", ",", "t"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          SubscriptBox["t", "list"]}], "}"}]}], "]"}]}]}]}], "]"}], 
  ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tH", "=", 
       SubscriptBox["tH", "val"]}], ",", 
      RowBox[{"U", "=", 
       SubscriptBox["U", "val"]}], ",", 
      RowBox[{"\[Mu]", "=", 
       SubscriptBox["\[Mu]", "val"]}], ",", 
      RowBox[{"M", "=", 
       SubscriptBox["M", "val"]}], ",", 
      RowBox[{"L", "=", 
       SubscriptBox["L", "val"]}], ",", 
      RowBox[{"\[Phi]", "=", 
       SubscriptBox["\[Phi]", "state"]}], ",", "HB"}], "}"}], ",", 
    RowBox[{
     RowBox[{"HB", "=", 
      RowBox[{"N", "[", 
       RowBox[{"HBose", "[", 
        RowBox[{"tH", ",", "U", ",", "\[Mu]", ",", "M", ",", "L"}], "]"}], 
       "]"}]}], ";", 
     RowBox[{
      SubscriptBox["gf", 
       RowBox[{"list", ",", "ref"}]], "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"GF", "[", 
         RowBox[{
          RowBox[{"SiteCreateOpFull", "[", 
           RowBox[{
            SubscriptBox["j", "site"], ",", "M", ",", "L"}], "]"}], ",", 
          RowBox[{"SiteAnnihilOpFull", "[", 
           RowBox[{
            SubscriptBox["i", "site"], ",", "M", ",", "L"}], "]"}], ",", "HB",
           ",", "\[Phi]", ",", "t"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          SubscriptBox["t", "list"]}], "}"}]}], "]"}]}]}]}], "]"}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "compare", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["otoc1", "list"], "-", 
     SubscriptBox["otoc1", 
      RowBox[{"list", ",", "ref"}]]}], ",", "\[Infinity]"}], "]"}]}]], "Input"],

Cell[BoxData["0.00005330221655564827`"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "compare", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["otoc2", "list"], "-", 
     SubscriptBox["otoc2", 
      RowBox[{"list", ",", "ref"}]]}], ",", "\[Infinity]"}], "]"}]}]], "Input"],

Cell[BoxData["0.0001358363476457988`"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "compare", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["gf", "list"], "-", 
     SubscriptBox["gf", 
      RowBox[{"list", ",", "ref"}]]}], ",", "\[Infinity]"}], "]"}]}]], "Input"],

Cell[BoxData["0.000042650853881624065`"], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualize results", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["plot", "label"], "=", 
   RowBox[{
   "\"\<Bose-Hubbard model with\\n\!\(\*SubscriptBox[\(t\), \(H\)]\)=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["tH", "val"], "]"}], "<>", "\"\<, U=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["U", "val"], "]"}], "<>", "\"\<, \[Mu]=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     RowBox[{"InputForm", "[", 
      SubscriptBox["\[Mu]", "val"], "]"}], "]"}], "<>", "\"\<, M=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["M", "val"], "]"}], "<>", "\"\<, L=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["L", "val"], "]"}], "<>", "\"\<\\nsites: i=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["i", "site"], "]"}], "<>", "\"\<, j=\>\"", "<>", 
    RowBox[{"ToString", "[", 
     SubscriptBox["j", "site"], "]"}]}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["fn", "export"], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<plots/\>\"", "<>", "#", "<>", "\"\</\>\"", "<>", "#", "<>", 
      "\"\<_\>\""}], "&"}], "[", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["t", "list"], ",", 
          RowBox[{"Re", "[", 
           SubscriptBox["otoc1", "list"], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["t", "list"], ",", 
          RowBox[{"Im", "[", 
           SubscriptBox["otoc1", "list"], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<t\>\"", ",", 
        "\"\<Tr[\[Phi] \!\(\*SubsuperscriptBox[\(b\), \(j\), \
\(\[Dagger]\)]\)(t) \!\(\*SubsuperscriptBox[\(b\), \(i\), \(\[Dagger]\)]\)(0) \
\!\(\*SubscriptBox[\(b\), \(j\)]\)(t) \!\(\*SubscriptBox[\(b\), \
\(i\)]\)(0)]\>\""}], "}"}]}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{
       SubscriptBox["plot", "label"], "<>", 
       "\"\<\\nred: independent reference calculation\>\""}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"ColorData", "[", "97", "]"}], "[", "1", "]"}], ",", 
        RowBox[{
         RowBox[{"ColorData", "[", "97", "]"}], "[", "3", "]"}]}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Re\>\"", ",", "\"\<Im\>\""}], "}"}]}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Interpolation", "[", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["t", "list"], ",", 
            RowBox[{"Re", "[", 
             SubscriptBox["otoc1", 
              RowBox[{"list", ",", "ref"}]], "]"}]}], "}"}], "]"}], "]"}], 
        "[", "\[Tau]", "]"}], ",", 
       RowBox[{
        RowBox[{"Interpolation", "[", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["t", "list"], ",", 
            RowBox[{"Im", "[", 
             SubscriptBox["otoc1", 
              RowBox[{"list", ",", "ref"}]], "]"}]}], "}"}], "]"}], "]"}], 
        "[", "\[Tau]", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Tau]", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{
       RowBox[{"ColorData", "[", "97", "]"}], "[", "4", "]"}]}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["fn", "export"], "<>", "\"\<otoc1_L\>\"", "<>", 
     RowBox[{"ToString", "[", 
      SubscriptBox["L", "val"], "]"}], "<>", "\"\<.pdf\>\""}], ",", "%"}], 
   "]"}], ";"}]}], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {
       Hue[0.67, 0.6, 0.6], 
       Directive[
        PointSize[0.016666666666666666`], 
        AbsoluteThickness[1.6], 
        RGBColor[0.368417, 0.506779, 0.709798]], 
       PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2EPoA/bvxXXmvPn5Hsq/YB/JcZNpx1oY/4Z9
k/F01qQz76D8B/Y77YycrLvfQvlP7Dkib6/b1f0Gyn9hr3NnbpnbvddQ/hv7
Xb53lmQpv7KH2fuf5aLN9WVPofxP9rPY+da/+nEXyv9iP7PbRU/c5xKU/80+
R04o6oX+SSj/h73W5VWdkjZHofxf9pE3v9ydNWk3lP/H/sC/otks57P3Q/j/
7Bl8txWKbtsL5TM4TE5k6X/7+SiUz+iwvm4egy/PISifyaEnWO2C0oOFUD6z
g9ed9opTITug5rM4+N7JXJU+8QSUz+rgsPLntJc656B8Noc5oVmmK3wvQPns
DjyOGbHa3jD/cDh8SK6Q+7vrMpTP6WCg/vB6avNFKJ/LgU/+S83xGph/uR1Y
OOTPvWs9BOXzOJRPiP4TE7ofyud12N0vb72XD+Y+Poethn88LrCsgPL5HSbw
K1VdWDkVyhdwsLl1Yy2r22wIv0HAoeDCJvYvAjVQ/wo6rMuaeaOw7yCE3yDo
YHDqrJrCrstQeSEHr+DgR0EvbkLlhRyeJkxKCL9wAyov7FA45+PRIIUrUHlh
h/LFzE66iheg8iIO3FfNRZoFz+4HAPQpwBM=
        "]], 
       Hue[0.9060679774997897, 0.6, 0.6], 
       Directive[
        PointSize[0.016666666666666666`], 
        AbsoluteThickness[1.6], 
        RGBColor[0.560181, 0.691569, 0.194885]], 
       PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjR0csC/VvfxtyTWx/RD+BXsLk1MWZsdToPwb9ipp
edznpPqh/Af2my6ps1xwWwblP7F/oflgae36zVD+C/uat6d+Os3cBuW/sT/F
W3TtquRKKP+D/TbB/HXvGxbbQ/if7O/aPTUQc9gL5X+xb1ny5vrnpD1Q/jf7
aV8kIh7ILYDyf9iXzL/+4HvwOqh5v+xXFryI+xJ8AMr/Y385U3MVY+gJKP+f
/Z0ID16PTxegfAYHHxk/0c7461A+o0P7ieC8kwr3oXwmB5cvc579UnoE5TM7
8ES1GXgWPITyWRzi/hr1CnjfgfJZHdimz2E44nAVymdzmCkZf62V9yKUz+6Q
lcPV0uh+HsrncFDztbu8MPgMlM/pIFHQfaSz5jCUz+VwY6mX+JFAWPhyOwS9
uPl6z6bVUP/zONQI1l8+dQMWPrwORdYmQvHeR6B8Poee9y8FXJ6fhvL5Hbrc
HMXMLl+E8gUcUpdqnsiffwXCbwDyhZd1ep+8CpUXdDj0ysLm/i6YvKCDspux
7OEcmH4hh3lXSrX9556Aygs5iC6el9E9cTtUXthhAdtO0ZfhPRD3Nwg7fPj8
MCJOfTfUPyIOZcy3K9cqHN0PAEZ/xVU=
        "]]}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         RGBColor[0.922526, 0.385626, 0.209179]], 
        LineBox[CompressedData["
1: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
Fv1wp9vyeyKKZuuc+rvmirnE2z4z/UhExeR3k6nnPLALu3deOeFDRJzfq3av
xn3GugRsSdQIIiqnftD49iQKW1rf4Xk+l4gS1udP3VhMxKbnzn9cycPn1ejC
qdXWJGx0/NX7uAIievth+f6RzGSsq6PvFUMxEV1hUxc5fDIVK8r4YZ1fQUTG
CnttvnGkYS6WR3WlW4mI1yZ/24/aTIzYY8DHQSMiN97PCTeqC7H9+UEhNRK8
6FBdb+SLpUqsys424+Y+XlQa93DE5lQVZr5fq5EqyYt6vhoRrN5XYT8CVhl5
pHkRA7/mp+d81ZiU7S1bPXleZGr9/mb4oRpMeu8ejZ6TvOjJ0OuQILM6TNY7
eX7yKi/qa63mf2pMwRrU3HjeGPCitAPLfRnvKJj1+h0p4g1e9PT+C6We7xQs
5QGvkcItXrQef3usd4yCyZ19UvvsLi9S8e3/4m/bhCmsHI3ZsuFF7+/mZbPa
N2OKd8kXeT/yotT4RUz2Rism/G34WLk7L2I1+uzz8HkrRj/Esu+5By/KKToz
YO3fijWYnVvv8eZFTufJ7yvrWzEzi8b4+EBe9Muvbivz5G8s2K6TDn3jRTwG
L2vlSW3Y67RV6ux3XvRseSgxXroNM53b2fE9jhf9/Uai/j3bhsk9vZ3M8ZMX
9a9GrHo+a8Oq7QdutP/iRYWfaMG9bW3Y6pvJdGuMF3UXC/yZd2/H/hVzR+0q
4UXjn89+Uo1uxyro5NxbS3lRQPug3YXMduzzu0dGxyp40fTHeyaf/rRjMm5L
nMz1vMjVvYuYfrADI1UJLuc08CLHZpaaKtSBLbMeG3hI4UU3T75OCNDrwMrd
HXObWnjRgr6CgZ59B3bLi84soosXZb2UitMr6sDONu6+pNvDiwi1fN3bGzsw
KeLZEwx/8H7RRCR8/nZgi76upAd9vEjU18kybKsD8wrgwI6M8uL32dltpBOd
2JM2mYSRMXw/8coRy3Od2I3tOgGhE7zon1Oq/nODTkwyxOchgcaLzJtOCEQ9
7sSKwwUE6xZ40bZdom0HYjsxnYjeXSZLvOjzg/YPx351Yt0R36WXl3mRl9KN
fIaCTsw80krRa5UXnf6eIvK+ohNbjFQEiXVeNND8704RpRNzidrQzNvgRVE9
i/IpXZ0YKZp8WXeLF8X9XVW9NtiJRUd7Gg4TSMgntFqre6ITO/jlipkjPQl1
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
E0CdA1lguhHNv+iW7fY=
         "]]}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         RGBColor[0.922526, 0.385626, 0.209179]], 
        LineBox[CompressedData["
1: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
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 5.}, {-0.5667700294649269, 1.}}, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {
       FormBox["\"t\"", TraditionalForm], 
       FormBox[
       "\"Tr[\[Phi] \\!\\(\\*SubsuperscriptBox[\\(b\\), \\(j\\), \\(\[Dagger]\
\\)]\\)(t) \\!\\(\\*SubsuperscriptBox[\\(b\\), \\(i\\), \
\\(\[Dagger]\\)]\\)(0) \\!\\(\\*SubscriptBox[\\(b\\), \\(j\\)]\\)(t) \
\\!\\(\\*SubscriptBox[\\(b\\), \\(i\\)]\\)(0)]\"", TraditionalForm]}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, PlotLabel -> 
     FormBox["\"Bose-Hubbard model with\\n\\!\\(\\*SubscriptBox[\\(t\\), \\(H\
\\)]\\)=1, U=5, \[Mu]=1/7, M=2, L=5\\nsites: i=1, j=3\\nred: independent \
reference calculation\"", TraditionalForm], 
     PlotRange -> {{0, 5.}, {-0.5667700294649269, 1.}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Re\"", "\"Im\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["t", "list"], ",", 
          RowBox[{"Re", "[", 
           SubscriptBox["otoc2", "list"], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["t", "list"], ",", 
          RowBox[{"Im", "[", 
           SubscriptBox["otoc2", "list"], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<t\>\"", ",", 
        "\"\<Tr[\[Phi] \!\(\*SubsuperscriptBox[\(b\), \(j\), \
\(\[Dagger]\)]\)(t) \!\(\*SubscriptBox[\(b\), \(i\)]\)(0) \!\(\*SubscriptBox[\
\(b\), \(j\)]\)(t) \!\(\*SubsuperscriptBox[\(b\), \(i\), \(\[Dagger]\)]\)(0)]\
\>\""}], "}"}]}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{
       SubscriptBox["plot", "label"], "<>", 
       "\"\<\\nred: independent reference calculation\>\""}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"ColorData", "[", "97", "]"}], "[", "1", "]"}], ",", 
        RowBox[{
         RowBox[{"ColorData", "[", "97", "]"}], "[", "3", "]"}]}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Re\>\"", ",", "\"\<Im\>\""}], "}"}]}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Interpolation", "[", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["t", "list"], ",", 
            RowBox[{"Re", "[", 
             SubscriptBox["otoc2", 
              RowBox[{"list", ",", "ref"}]], "]"}]}], "}"}], "]"}], "]"}], 
        "[", "\[Tau]", "]"}], ",", 
       RowBox[{
        RowBox[{"Interpolation", "[", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["t", "list"], ",", 
            RowBox[{"Im", "[", 
             SubscriptBox["otoc2", 
              RowBox[{"list", ",", "ref"}]], "]"}]}], "}"}], "]"}], "]"}], 
        "[", "\[Tau]", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Tau]", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{
       RowBox[{"ColorData", "[", "97", "]"}], "[", "4", "]"}]}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["fn", "export"], "<>", "\"\<otoc2_L\>\"", "<>", 
     RowBox[{"ToString", "[", 
      SubscriptBox["L", "val"], "]"}], "<>", "\"\<.pdf\>\""}], ",", "%"}], 
   "]"}], ";"}]}], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {
       Hue[0.67, 0.6, 0.6], 
       Directive[
        PointSize[0.016666666666666666`], 
        AbsoluteThickness[1.6], 
        RGBColor[0.368417, 0.506779, 0.709798]], 
       PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOMEMoBQh2wf/0s59OWf//tIfwL9u4lPzTfvYTx
b9irK3A0zmmH8R/YB+8pzNNt/wflP7GfVr3RJHfNHyj/hf3TJ6+fns7+CeW/
sZecLTLty8vPUP4H+/vTJ0391/0Syv9kL8UuV/zrzi0o/4u9Wb2NYM/Uc1D+
N3uD7ixBubWnoPwf9g9q3h3Y7H0cyv9lL3f8cOO6w5ug/D/2H1KSePzFNuyH
8P/ZB6ZKylXt3grlMzhcubPN4HLnBqh6RoeHIraBF0QvQvlMDj7vv/6ddeQa
lM/skOP0nH/nvQtQPovDl69fZH9VLYTyWR1y0tSnZhuehJrP5tD09dSNu5cu
QPnsDouSFbftKtwE5XM47Ge70pS7+xJUP6fDtPgjQS6Kj6B8Lge2My9ndUc+
gPK5HZq/b2SxTDgG5fM4SCTsiGWbugdqHq9D33P+bibPZVA+n4NP/43HJnEw
9/M7PDl1KNY14xmUL+BwqqzjH7vpUwi/QcDB7/mMxfbyMPcIOvw8Jn5RqmA/
xLwGQQcN5oJ7L6bdhJov5NBxoa/8ic8jqLyQg/w0aYOK+VA+g7BD7/ezX17c
uQ6VF3aQXNlqe/n9Xqi8iMOkGXO+S9Rs3Q8Aw83OTg==
        "]], 
       Hue[0.9060679774997897, 0.6, 0.6], 
       Directive[
        PointSize[0.016666666666666666`], 
        AbsoluteThickness[1.6], 
        RGBColor[0.560181, 0.691569, 0.194885]], 
       PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjR0csJdiVn7G/NjIHsK/YM/2+2fC5bomKP+GvedD
YQ5nzvVQ/gP7abvYAjKMTkL5T+xtj4mtsc++BeW/sHdr9woxu/YEyn9jr7Bm
hfhJ51dQ/gd7mY12YY6WMP4n+97fmbtKjsHUf7HfZvRaIpHhPpT/zb5ty9f0
hkgY/4d90flPtyfcfAzl/7L/z8SZ4pv/DMr/Y3/N5cHjNHOYef/stThe8Xg+
vQPlMzi8fp2TXBVxAcpndPi+3eR4uPBeKJ/JoaY95MzZNzD/Mjtc4Hy9cfGr
TVA+i8P9RBOdYzWroHxWh4pzy7fs7dywH8JncwgssfjerHQBymd3WFJ1TmvT
7ltQPocD/5L8pIpvN6F8TocNP/k94jcdhfK5HM4kbi5zeL4Zaj63g8e5dxHN
0nOhfB4Hv8kH5/q9vwFVz+uw/cLTcKmcV1A+n0PBkVlBmbEwPr/DrlUWyybO
uA7lCzhcqJ9zMCPgMMS8BgGH0v+Pq+LZYfEn6PDxU8Sb/4w3ofKCDnLG0ZPc
r16Cygs5yPM93XzNGRr/DUIO5tUpwfLWG6Dywg4Gu1K2zt/ZDLGvQdjhYPW/
W2tc9kPlRRy6LIUcKlmu2gMAs7rDEA==
        "]]}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         RGBColor[0.922526, 0.385626, 0.209179]], 
        LineBox[CompressedData["
1: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
         "]]}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         RGBColor[0.922526, 0.385626, 0.209179]], 
        LineBox[CompressedData["
1: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
KBpVnvrzh8aYbi3NTbPfwv8B13oRmw==
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 5.}, {-0.8256961552383676, 2.0000000000000004`}}, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"t\"", TraditionalForm], 
       FormBox[
       "\"Tr[\[Phi] \\!\\(\\*SubsuperscriptBox[\\(b\\), \\(j\\), \\(\[Dagger]\
\\)]\\)(t) \\!\\(\\*SubscriptBox[\\(b\\), \\(i\\)]\\)(0) \
\\!\\(\\*SubscriptBox[\\(b\\), \\(j\\)]\\)(t) \\!\\(\\*SubsuperscriptBox[\\(b\
\\), \\(i\\), \\(\[Dagger]\\)]\\)(0)]\"", TraditionalForm]}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, PlotLabel -> 
     FormBox["\"Bose-Hubbard model with\\n\\!\\(\\*SubscriptBox[\\(t\\), \\(H\
\\)]\\)=1, U=5, \[Mu]=1/7, M=2, L=5\\nsites: i=1, j=3\\nred: independent \
reference calculation\"", TraditionalForm], 
     PlotRange -> {{0, 5.}, {-0.8256961552383676, 2.0000000000000004`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Re\"", "\"Im\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["t", "list"], ",", 
          RowBox[{"Re", "[", 
           SubscriptBox["gf", "list"], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["t", "list"], ",", 
          RowBox[{"Im", "[", 
           SubscriptBox["gf", "list"], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<t\>\"", ",", 
        "\"\<Tr[\[Phi] \!\(\*SubsuperscriptBox[\(b\), \(j\), \
\(\[Dagger]\)]\)(t) \!\(\*SubscriptBox[\(b\), \(i\)]\)(0)]\>\""}], "}"}]}], 
     ",", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{
       SubscriptBox["plot", "label"], "<>", 
       "\"\<\\nred: independent reference calculation\>\""}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"ColorData", "[", "97", "]"}], "[", "1", "]"}], ",", 
        RowBox[{
         RowBox[{"ColorData", "[", "97", "]"}], "[", "3", "]"}]}], "}"}]}], 
     ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Re\>\"", ",", "\"\<Im\>\""}], "}"}]}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Interpolation", "[", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["t", "list"], ",", 
            RowBox[{"Re", "[", 
             SubscriptBox["gf", 
              RowBox[{"list", ",", "ref"}]], "]"}]}], "}"}], "]"}], "]"}], 
        "[", "\[Tau]", "]"}], ",", 
       RowBox[{
        RowBox[{"Interpolation", "[", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["t", "list"], ",", 
            RowBox[{"Im", "[", 
             SubscriptBox["gf", 
              RowBox[{"list", ",", "ref"}]], "]"}]}], "}"}], "]"}], "]"}], 
        "[", "\[Tau]", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Tau]", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{
       RowBox[{"ColorData", "[", "97", "]"}], "[", "4", "]"}]}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["fn", "export"], "<>", "\"\<gf_L\>\"", "<>", 
     RowBox[{"ToString", "[", 
      SubscriptBox["L", "val"], "]"}], "<>", "\"\<.pdf\>\""}], ",", "%"}], 
   "]"}], ";"}]}], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {
       Hue[0.67, 0.6, 0.6], 
       Directive[
        PointSize[0.016666666666666666`], 
        AbsoluteThickness[1.6], 
        RGBColor[0.368417, 0.506779, 0.709798]], 
       PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjR0csF8cJvPo8KLi/RD+Bfsngedv/dhTYQ/h37Bn
NDm/+yvjGij/gX3FpJUmeVf3QPlP7H9v3SA/f8lhKP+F/etWwcnfJh2H8t/Y
C6QrWCpXn4TyP9jrali2u8XA5D/Zl2ReubN5MUz/F/sfnKphAf8OQvnf7Gcc
dNmavQDG/2Hvlu/+utAOZv8v+9tSRicLxedC+X/sr2W/vRS/ewvUP//s1Zg9
q6I+7IXyGRw09jCefKFeAeUzOsxLEyt4vR3mHiaHp7O8BGecuwTlMzuw5P97
2/fwNJTP4vBAmjXiT30slM/qcFZk1Zqa0DNQ89gcmHiy2j9qXIPy2R3uBGj/
XHQLxudwsHrB3uzXfRnK53Q4cPrl+xMrz0P5XA41jHscVq04BeVzOxga9jwQ
fnYcyudxiDibXurmcxTK53VIqS9kun73AJTP5xCRbb9q6cKtUD6/wyLHDP21
6gugfAGHL4qa1oHfoeHVIODgeOHt/1szt0D9I+jQ9MKSfeOv9VB5QQeupauf
lbdtgOoXcqj+MGemf+05CL9ByCHiu5Tf9klXofLCDs/3ebRnfoT6r0HYIWra
pUVll09D5UUcqv8X7fNIObgfAPG5yxE=
        "]], 
       Hue[0.9060679774997897, 0.6, 0.6], 
       Directive[
        PointSize[0.016666666666666666`], 
        AbsoluteThickness[1.6], 
        RGBColor[0.560181, 0.691569, 0.194885]], 
       PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjR0csOd7KrC/27XMHsK/YM/K4GY3a+UsKP+G/c8r
s+7qPZ8P5T+wf9PWF6ywOHc/hP/E/vML7XiR5+ug/Bf2OaoNxwQKDkD5b+x/
Bot1nYo6DeV/sDec5N63ecklKP+T/YQe5Sy171eg/C/2j9el3RGwugrlf7NX
Fd6w9F4ZjP/DvlaVQUAm4RqU/8t+0m6WxhXPYfJ/7DWepN635r8A5f+z95wQ
VWn4cwOUz+CQduDptOldu6D+YXSY2GC0yql8H5TP5MBm4vJgUuYyqHpmB9GM
S8vZ+C9C+SwOx9t2KJn+ugnlszqc0xX5fcL7FpTP5qBkUen5txPmHnaHF87T
50RXwPRzOPhKLr+/LRrG53So5hA50PcQ5n8uh2+O5b/2ScHM43bo7OKIl5O+
D+XzOHDoCAhxujyE8nkdUl743ewReQTl8zlc/PPE3MMYxud3OMqjaPJ/CUy9
gIOg2cp5wZsfQPgNAg46qyfPfOsJ5TMIOnxIaoxoaoDJCzpMmi8y+1LgPai8
kEOwcXK9dedlqLyQQ4ZlRs3e0wuh8sIOntf1fy39cxoSng3CDjn5x433/bwG
DV8RB1MfwX+FwHQFAB5IxrQ=
        "]]}, {}}, {{{}, {}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         RGBColor[0.922526, 0.385626, 0.209179]], 
        LineBox[CompressedData["
1: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
JHvhgjoi/telrmamxXih891B9pZN0LcSzriiV4zNtz/46HVtQt07auF2LSK/
h79OpQ9swp7ER68mLhTjmxq5V+n/Evky/PYyTL4YNztU5N4Y2wQHq5bWbrFi
fD6meU/izCYsuTJzJuwpxri2//nG0iZcV3o2R8dajKXnRv6pb27CVes7BydX
inAy7+KlGNot8Ewa8H3aU4QPnaVOn2faAvnLL0a9U4twhDkbtzJ5C3zML4fu
9SzCOwJ3O4fu2oLxV/nZZ3SK8MvCQ7/G+Lfgt5yS/oJoEXZgU0jyP7IFLxwy
6smNhXj65EXy72NbcIw/sOppRCE2vnP9kZT0Fhi7+BV7mBbiaymW0KO4BU6f
63j1twuwhOaHtv26W0DbcSo2mLcAJzxJknlksAWLn4sStwfysUBsTmS1yRbc
fasZxBmdj9nnm+4/eLQFNX8in8sI5OOxQKqNLL8teJT+oa+BnIf1i1j1GYO2
QPOtBSWvNhd3D/FU6YRvQey//zjuPMvFVdISAdvxW/BJYLB+YCIHx3brH7xQ
ugXLbDSPpzOz8S3+8kv981vg9veRpRRLJh6zmJ3LWtsCiuuoKv+XDOyA94X5
U2/DX4vW7a9KGTjYwHlIkWMb/O6Ef2lzTMetCSeffhHZhsMiR+WedaTiiycT
Uh7rb8NMahS7ZWQi7vHs1NIw2Ya3mWFnB1K/YJNuuo0jVsR5XDK8C6UJ2NNJ
//yA8zYk8PgeER/4jMtKeX+dDd2G4yZ98mYrsfi0ui+Fs2kbvEnKx819g3Dt
h4LcsY5toJJyPKRi+Q5rz47eqejfBjN3Y5W9qm/wo0DlJPuxbWCv9OJunfXB
2pPbgtM0VIiqZb07JdUKB57Iy9faS4UcflWyKuwOANaSoxP7tahQzYaO2MKO
b/A7TLPGVZsK8axalD+7lww5tvZx/beoECPpUkhYTgoYHC7XDTagQtUFM7Lh
4mmQ46fTwGRNhdh0bh+/15kBBrd9kmdeUqHLCjn0Z4/kQe7asHVxCRU6GVMl
Zkq8p/3aWdX4KqjQ1/PHH+07WgaGyZJHHKqp0JuNDcUglzJgN3j6S6KRCrG/
iyRnCJaDYe3OK5/6qFBQHlu9nnEFsIeeO/F6iQoJ/5PzaPpRBfdOxi7eFKVG
nyvsQ9wUvsNLv50cLseo0R1pniNDjt8h+Z+3cLQkNdo8Vd9cm/0dlsKsbg3L
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

         "]]}, {
        Directive[
         Opacity[1.], 
         AbsoluteThickness[1.6], 
         RGBColor[0.922526, 0.385626, 0.209179]], 
        LineBox[CompressedData["
1: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
/qDC36kpBCnVWvxN01j8PxQzsss=
         "]]}}}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 5.}, {-0.5687600223244776, 0.37502717791830104`}}, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"t\"", TraditionalForm], 
       FormBox[
       "\"Tr[\[Phi] \\!\\(\\*SubsuperscriptBox[\\(b\\), \\(j\\), \\(\[Dagger]\
\\)]\\)(t) \\!\\(\\*SubscriptBox[\\(b\\), \\(i\\)]\\)(0)]\"", 
        TraditionalForm]}, AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, PlotLabel -> 
     FormBox["\"Bose-Hubbard model with\\n\\!\\(\\*SubscriptBox[\\(t\\), \\(H\
\\)]\\)=1, U=5, \[Mu]=1/7, M=2, L=5\\nsites: i=1, j=3\\nred: independent \
reference calculation\"", TraditionalForm], 
     PlotRange -> {{0, 5.}, {-0.5687600223244776, 0.37502717791830104`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Re\"", "\"Im\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.6], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.016666666666666666`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Virtual bond dimensions", "Subsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["t", "plot"], "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"1", "/", "4"}], ",", 
     RowBox[{"1", "/", "2"}], ",", "1", ",", "2", ",", "4"}], "}"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"virtual", " ", "bond", " ", "dimension", " ", "of", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", "H", " ", "t"}]], " ", 
    SubsuperscriptBox["b", "j", "\[Dagger]"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"\[ImaginaryI]", " ", "H", " ", "t"}]], " ", "operator"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{
         SubscriptBox["fn", "import"], "<>", "\"\<_D.dat\>\""}], ",", 
        "\"\<Integer64\>\""}], "]"}], ",", 
      RowBox[{
       SubscriptBox["L", "val"], "+", "1"}]}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"%", "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}], 
      "&"}], "/@", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{
          SubscriptBox["t", "list"], ",", "#"}], "]"}], "&"}], "/@", 
       SubscriptBox["t", "plot"]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", 
            SubscriptBox["L", "val"]}], "]"}], ",", "#"}], "}"}], "]"}], 
       "&"}], "/@", "%"}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<j\>\"", ",", "\"\<\!\(\*SubscriptBox[\(D\), \(A, j\)]\)(t)\>\""}],
        "}"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{
      "\"\<virtual bond dimension of \
\!\(\*SuperscriptBox[\(\[ExponentialE]\), \(\(-\[ImaginaryI]\)\\\ H\\\ t\)]\) \
\!\(\*SubsuperscriptBox[\(b\), \(j\), \(\[Dagger]\)]\) \
\!\(\*SuperscriptBox[\(\[ExponentialE]\), \(\[ImaginaryI]\\\ H\\\ t\)]\)\\n\>\
\"", "<>", 
       SubscriptBox["plot", "label"]}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Lighter", "[", 
         RowBox[{"Blue", ",", 
          RowBox[{"2", "/", "3"}]}], "]"}], ",", 
        RowBox[{"Lighter", "[", 
         RowBox[{"Blue", ",", 
          RowBox[{"1", "/", "3"}]}], "]"}], ",", "Blue", ",", 
        RowBox[{"Darker", "[", 
         RowBox[{"Blue", ",", 
          RowBox[{"1", "/", "3"}]}], "]"}], ",", 
        RowBox[{"Darker", "[", 
         RowBox[{"Blue", ",", 
          RowBox[{"2", "/", "3"}]}], "]"}], ",", "Black"}], "}"}]}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"\"\<t=\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"InputForm", "[", "#", "]"}], "]"}]}], "&"}], "/@", 
        SubscriptBox["t", "plot"]}], ")"}]}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{
      RowBox[{
       SubscriptBox["fn", "export"], "<>", "\"\<D_L\>\"", "<>", 
       RowBox[{"ToString", "[", 
        SubscriptBox["L", "val"], "]"}], "<>", "\"\<_M\>\"", "<>", 
       RowBox[{"ToString", "[", 
        SubscriptBox["M", "val"], "]"}], "<>", "\"\<.pdf\>\""}], ",", "%"}], 
     "]"}], ";"}]}]}]], "Input"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         AbsoluteThickness[1.6], 
         RGBColor[
          NCache[
           Rational[2, 3], 0.6666666666666666], 
          NCache[
           Rational[2, 3], 0.6666666666666666], 1]], 
        LineBox[{{0., 1.}, {1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}, {5., 
         1.}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         AbsoluteThickness[1.6], 
         RGBColor[
          NCache[
           Rational[1, 3], 0.3333333333333333], 
          NCache[
           Rational[1, 3], 0.3333333333333333], 1]], 
        LineBox[{{0., 1.}, {1., 9.}, {2., 22.}, {3., 32.}, {4., 9.}, {5., 
         1.}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 0, 1]], 
        LineBox[{{0., 1.}, {1., 9.}, {2., 61.}, {3., 70.}, {4., 9.}, {5., 
         1.}}]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 0, 
          NCache[
           Rational[2, 3], 0.6666666666666666]]], 
        LineBox[{{0., 1.}, {1., 9.}, {2., 81.}, {3., 81.}, {4., 9.}, {5., 
         1.}}]}, {
        Hue[0.6142719099991583, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         AbsoluteThickness[1.6], 
         RGBColor[0, 0, 
          NCache[
           Rational[1, 3], 0.3333333333333333]]], 
        LineBox[{{0., 1.}, {1., 9.}, {2., 81.}, {3., 81.}, {4., 9.}, {5., 
         1.}}]}, {
        Hue[0.8503398874989481, 0.6, 0.6], 
        Directive[
         PointSize[0.019444444444444445`], 
         AbsoluteThickness[1.6], 
         GrayLevel[0]], 
        LineBox[{{0., 1.}, {1., 9.}, {2., 81.}, {3., 81.}, {4., 9.}, {5., 
         1.}}]}}}, {}}, {DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 5.}, {0, 81.}}, DisplayFunction -> Identity, 
     AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {
       FormBox["\"j\"", TraditionalForm], 
       FormBox[
       "\"\\!\\(\\*SubscriptBox[\\(D\\), \\(A, j\\)]\\)(t)\"", 
        TraditionalForm]}, AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, PlotLabel -> 
     FormBox["\"virtual bond dimension of \\!\\(\\*SuperscriptBox[\\(\
\[ExponentialE]\\), \\(\\(-\[ImaginaryI]\\)\\\\ H\\\\ t\\)]\\) \
\\!\\(\\*SubsuperscriptBox[\\(b\\), \\(j\\), \\(\[Dagger]\\)]\\) \
\\!\\(\\*SuperscriptBox[\\(\[ExponentialE]\\), \\(\[ImaginaryI]\\\\ H\\\\ \
t\\)]\\)\\nBose-Hubbard model with\\n\\!\\(\\*SubscriptBox[\\(t\\), \
\\(H\\)]\\)=1, U=5, \[Mu]=1/7, M=2, L=5\\nsites: i=1, j=3\"", 
       TraditionalForm], PlotRange -> {{0, 5.}, {0, 81.}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"t=0\"", "\"t=1/4\"", "\"t=1/2\"", "\"t=1\"", "\"t=2\"", "\"t=4\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 
                    NCache[
                    Rational[2, 3], 0.6666666666666666], 1]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 1]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[1, 3], 0.3333333333333333]]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 
                    NCache[
                    Rational[1, 3], 0.3333333333333333]]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.35], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    Rational[2, 3], 
                    Rational[2, 3], 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4444444444444444, 0.4444444444444444, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[2/3, 2/3, 1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[
                    Rational[2, 3], 
                    Rational[2, 3], 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    Rational[2, 3], 
                    Rational[2, 3], 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    Rational[1, 3], 
                    Rational[1, 3], 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.2222222222222222, 0.2222222222222222, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1/3, 1/3, 1]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[
                    Rational[1, 3], 
                    Rational[1, 3], 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    Rational[1, 3], 
                    Rational[1, 3], 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0, 1]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 
                    Rational[2, 3]], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.4444444444444444], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0, 2/3]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 
                    Rational[2, 3]]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 
                    Rational[2, 3]], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 
                    Rational[1, 3]], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.2222222222222222], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0, 1/3]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 
                    Rational[1, 3]]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 
                    Rational[1, 3]], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.019444444444444445`", "]"}], 
                   ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "GrayLevel[0]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False]}], 
                 "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6}], "}"}], 
           ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Effective truncation weight", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"tolerance", " ", 
    RowBox[{"(", 
     RowBox[{"truncation", " ", "weight"}], ")"}], " ", "of", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", "H", " ", "t"}]], " ", 
    SubsuperscriptBox["b", "j", "\[Dagger]"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"\[ImaginaryI]", " ", "H", " ", "t"}]], " ", "operator"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{
         SubscriptBox["fn", "import"], "<>", "\"\<_tol_eff.dat\>\""}], ",", 
        "\"\<Real64\>\""}], "]"}], ",", 
      RowBox[{
       SubscriptBox["L", "val"], "-", "1"}]}], "]"}], "-", 
    SuperscriptBox["10", 
     RowBox[{"-", "10"}]]}], "]"}]}]], "Input"],

Cell[BoxData["0.`"], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1626, 919},
WindowMargins->{{Automatic, 233}, {74, Automatic}},
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 1, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 48, 0, 63, "Section"],
Cell[631, 24, 123, 3, 31, "Input"],
Cell[757, 29, 77, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[859, 34, 46, 0, 43, "Subsection"],
Cell[908, 36, 297, 9, 31, "Input"],
Cell[1208, 47, 524, 15, 52, "Input"],
Cell[1735, 64, 185, 5, 31, "Input"],
Cell[1923, 71, 3410, 91, 167, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5370, 167, 43, 0, 43, "Subsection"],
Cell[5416, 169, 228, 7, 52, "Input"],
Cell[5647, 178, 214, 7, 52, "Input"],
Cell[5864, 187, 236, 7, 67, "Input"],
Cell[6103, 196, 233, 7, 52, "Input"],
Cell[6339, 205, 285, 9, 52, "Input"],
Cell[CellGroupData[{
Cell[6649, 218, 249, 7, 52, "Input"],
Cell[6901, 227, 29, 0, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6979, 233, 52, 0, 43, "Subsection"],
Cell[CellGroupData[{
Cell[7056, 237, 58, 0, 34, "Subsubsection"],
Cell[7117, 239, 436, 11, 31, "Input"],
Cell[CellGroupData[{
Cell[7578, 254, 321, 9, 52, "Input"],
Cell[7902, 265, 51, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7990, 271, 285, 7, 52, "Input"],
Cell[8278, 280, 411, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8726, 295, 321, 9, 52, "Input"],
Cell[9050, 306, 51, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9138, 312, 315, 9, 52, "Input"],
Cell[9456, 323, 51, 1, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9556, 330, 46, 0, 34, "Subsubsection"],
Cell[9605, 332, 641, 18, 48, "Input"],
Cell[10249, 352, 1023, 30, 48, "Input"],
Cell[11275, 384, 547, 15, 33, "Input"],
Cell[11825, 401, 549, 15, 33, "Input"],
Cell[12377, 418, 543, 15, 33, "Input"],
Cell[12923, 435, 189, 6, 52, "Input"],
Cell[CellGroupData[{
Cell[13137, 445, 1228, 36, 92, "Input"],
Cell[14368, 483, 7926, 162, 75, "Output"],
Cell[22297, 647, 239, 8, 31, "Output"]
}, Open  ]],
Cell[22551, 658, 178, 6, 31, "Input"],
Cell[CellGroupData[{
Cell[22754, 668, 487, 14, 52, "Input"],
Cell[23244, 684, 2589, 96, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25870, 785, 1163, 34, 72, "Input"],
Cell[27036, 821, 103, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27176, 828, 1203, 35, 92, "Input"],
Cell[28382, 865, 63, 1, 31, "Output"],
Cell[28448, 868, 30, 0, 31, "Output"]
}, Open  ]],
Cell[28493, 871, 1649, 47, 52, "Input"],
Cell[30145, 920, 1649, 47, 52, "Input"],
Cell[31797, 969, 1367, 41, 55, "Input"],
Cell[CellGroupData[{
Cell[33189, 1014, 291, 8, 52, "Input"],
Cell[33483, 1024, 50, 0, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33570, 1029, 291, 8, 52, "Input"],
Cell[33864, 1039, 49, 0, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33950, 1044, 285, 8, 54, "Input"],
Cell[34238, 1054, 51, 0, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[34338, 1060, 42, 0, 34, "Subsubsection"],
Cell[34383, 1062, 899, 20, 52, "Input"],
Cell[35285, 1084, 329, 10, 31, "Input"],
Cell[CellGroupData[{
Cell[35639, 1098, 2840, 80, 98, "Input"],
Cell[38482, 1180, 55545, 975, 300, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94064, 2160, 2840, 80, 98, "Input"],
Cell[96907, 2242, 67016, 1163, 300, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163960, 3410, 2731, 79, 98, "Input"],
Cell[166694, 3491, 63171, 1101, 318, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[229926, 4599, 45, 0, 43, "Subsection"],
Cell[229974, 4601, 237, 8, 31, "Input"],
Cell[CellGroupData[{
Cell[230236, 4613, 3361, 92, 139, "Input"],
Cell[233600, 4707, 27697, 591, 342, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[261346, 5304, 49, 0, 43, "Subsection"],
Cell[CellGroupData[{
Cell[261420, 5308, 896, 25, 55, "Input"],
Cell[262319, 5335, 30, 0, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
